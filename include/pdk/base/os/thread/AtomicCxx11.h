// @copyright 2017-2018 zzu_softboy <zzu_softboy@163.com>
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Created by softboy on 2017/11/24.

#ifndef PDK_M_BASE_OS_THREAD_ATOMIC_CXX11_H
#define PDK_M_BASE_OS_THREAD_ATOMIC_CXX11_H

#include "GenericAtomic.h"
#include <atomic>

namespace pdk {
namespace os {
namespace thread {

template <int N>
struct AtomicTraits
{
   static constexpr inline bool isLockFree();
};

#define PDK_ATOMIC_INT32_IS_SUPPORTED
#if ATOMIC_INT_LOCK_FREE == 2

#  define PDK_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
#  define PDK_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
#  define PDK_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
#  define PDK_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
#  define PDK_ATOMIC_INT32_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
#  define PDK_ATOMIC_INT32_TEST_AND_SET_IS_ALWAYS_NATIVE
#  define PDK_ATOMIC_INT32_FETCH_AND_STORE_IS_ALWAYS_NATIVE
#  define PDK_ATOMIC_INT32_FETCH_AND_ADD_IS_ALWAYS_NATIVE

template <>
struct AtomicTraits<4>
{
   static constexpr inline bool isLockFree()
   {
      return true;
   }
};

#elif ATOMIC_INT_LOCK_FREE == 1

#  define PDK_ATOMIC_INT_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE
#  define PDK_ATOMIC_INT_TEST_AND_SET_IS_SOMETIMES_NATIVE
#  define PDK_ATOMIC_INT_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
#  define PDK_ATOMIC_INT_FETCH_AND_ADD_IS_SOMETIMES_NATIVE
#  define PDK_ATOMIC_INT32_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE
#  define PDK_ATOMIC_INT32_TEST_AND_SET_IS_SOMETIMES_NATIVE
#  define PDK_ATOMIC_INT32_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
#  define PDK_ATOMIC_INT32_FETCH_AND_ADD_IS_SOMETIMES_NATIVE

template <>
struct AtomicTraits<4>
{
   static constexpr inline bool isLockFree()
   {
      return false;
   }
};

#else

#  define PDK_ATOMIC_INT_REFERENCE_COUNTING_IS_NEVER_NATIVE
#  define PDK_ATOMIC_INT_TEST_AND_SET_IS_NEVER_NATIVE
#  define PDK_ATOMIC_INT_FETCH_AND_STORE_IS_NEVER_NATIVE
#  define PDK_ATOMIC_INT_FETCH_AND_ADD_IS_NEVER_NATIVE
#  define PDK_ATOMIC_INT32_REFERENCE_COUNTING_IS_NEVER_NATIVE
#  define PDK_ATOMIC_INT32_TEST_AND_SET_IS_NEVER_NATIVE
#  define PDK_ATOMIC_INT32_FETCH_AND_STORE_IS_NEVER_NATIVE
#  define PDK_ATOMIC_INT32_FETCH_AND_ADD_IS_NEVER_NATIVE

template <>
struct AtomicTraits<4>
{
   static constexpr inline bool isLockFree()
   {
      return false;
   }
};

#endif

#if ATOMIC_POINTER_LOCK_FREE == 2

#  define PDK_ATOMIC_POINTER_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
#  define PDK_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
#  define PDK_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
#  define PDK_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE

#elif ATOMIC_POINTER_LOCK_FREE == 1

#  define PDK_ATOMIC_POINTER_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE
#  define PDK_ATOMIC_POINTER_TEST_AND_SET_IS_SOMETIMES_NATIVE
#  define PDK_ATOMIC_POINTER_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
#  define PDK_ATOMIC_POINTER_FETCH_AND_ADD_IS_SOMETIMES_NATIVE

#else

#  define PDK_ATOMIC_POINTER_REFERENCE_COUNTING_IS_NEVER_NATIVE
#  define PDK_ATOMIC_POINTER_TEST_AND_SET_IS_NEVER_NATIVE
#  define PDK_ATOMIC_POINTER_FETCH_AND_STORE_IS_NEVER_NATIVE
#  define PDK_ATOMIC_POINTER_FETCH_AND_ADD_IS_NEVER_NATIVE

#endif

template <>
struct AtomicOpsSupport<1>
{
   enum {
      IsSupported = 1
   };
};

#define PDK_ATOMIC_INT8_IS_SUPPORTED

#if ATOMIC_CHAR_LOCK_FREE == 2

#elif ATOMIC_CHAR_LOCK_FREE == 1
#else
#endif

} // thread
} // os
} // pdk

#endif // PDK_M_BASE_OS_THREAD_ATOMIC_CXX11_H
